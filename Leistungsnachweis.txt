% Leistungsnachweis
% Compiler
% Sommersemester 2014

Für den Schein ist in Zweiergruppen ein Compiler in Haskell zu programmieren, der Markdown in HTML
übersetzt.

# Zu akzeptierendes Markdown

Ausgehend von John Gruber’s [markdown](http://daringfireball.net/projects/markdown/) beschränken wir
uns auf folgende Syntax:

1.  Absätze und Zeilenumbrüche:
    -   Fortlaufender Text, der auf mehrere Zeilen verteilt werden kann, wird als Absatz dargestellt.
    -   Durch eine Leerzeile, die auch Leerzeichen oder Tabs enthalten darf, werden Absätze voneinander
        getrennt.
    -   Wird eine Zeile innerhalb des Textes mit zwei oder mehr Leerzeichen beendet, muss ein
        expliziter Zeilenumbruch eingefügt werden.

2.  Überschriften:
    -   Es müssen nur Überschriften im atx-Stil akzeotiert werden. Die 6 HTML-Überschriften-Level
        werden durch die entsprechende Anzahl von Hash-Zeichen am Beginn der Zeile definiert, z.B.

            # Ich bin ein H1-Header

            ##### Ich bin ein H5-Header

3.  Ungeordnete und geordnete Listen:
    -   Ungeordnete Listenelemente werden durch `*`, `+` oder `-` eingeleitet, z.B.

            -   erstes Element
            -   zweites Element
            -   ...

    -   Geordnete Listenelemente werden durch eine Zahl und einen Punkt eingeleitet. Dabei ist der
        Wert der Zahl unbedeutend, z.B.

            1.  erstes Element
            1.  zweites Element
            5.  drittes Element

    -   Listen können durch Einrückung ineinander verschachtelt werden.

4.  Code Blöcke:
    -   Durch Einrückung von mindestens 4 Leerzeichen oder einem Tabulator kann ein
        vorformattierter Code Block erzeugt werden. Die Leerzeichen zählen ab der umgebenden
        Einrückungsebene.
    -   In einen Code Block kann kein Markdown eingebettet werden.

5.  Inline- und Referenz-Links:
    -   Inline-Links enthalten den Link-Text in eckigen Klammern und die Referenz in runden Klammern dahinter, z.B.

            [Webpage zur Veranstaltung](http://ob.cs.hm.edu/lectures/compiler)

    -   Referenz-Links bestehen aus zwei Paaren eckigen Klammern. Im ersten Paar steht wieder der
        Linktext, im zweiten eine Referenz, die irgendwo im Dokument definiert ist, z.B.

            [Webpage zur Veranstaltung][Compiler]

        und irgendwo im Dokument:

            [Compiler]: http://ob.cs.hm.edu/lectures/compiler

        Ist der Link-Text und die Referenz identisch, kann das zweite Klammerpaar leer bleiben, z.B.

            [Compiler][]

6.  Schriftauszeichnungen

    -   Wird Text in `*` oder `_` eingeschlossen verändert das den Textstil. Konkret gilt:

        -   kursiv

                *ich bin kursiver Text*
                _ich auch_
                und hier nur m*itte*n im Wort

        -   fett

                **ich bin fetter Text**
                __ich auch__
                und hier nur m**itte**n im Wort

    -   um tatsächlich das Zeichen `*` oder `_` auszugeben, muss es escaped werde, also

            So sieht ein Stern aus \*

7.  Code im Text

    -   Code kann mitten im Text mit Backqoutes geschrieben werden, z.B.

            Implementieren Sie eine `main`-Funktion.

    -   Um das Zeichen `` ` `` im Code auszugeben, müssen Sie den Codeblock in zwei oder mehr Backqoutes
        einpacken, z.B.

            Um das Zeichen `` ` `` im Code auszugeben

8.  Bilder

    -   Bilder können, analog zu Links, inline oder als Referenz eingebettet werden. Zusätzlich muss
        der öffnenden eckigen Klammer ein `!` vorangestellt werden, z.B.

            ![Alt text](/path/to/img.jpg)

        oder mit einer Referenz

            ![Alt text][id]

            [id]: url/to/image

9.  Automatische Links

    -   Wird ein Text in spitzen Klammern geschrieben, wird daraus ein Link erzeugt, bei dem Link-Text
        und Referenz der (vermeintlichen) URL entsprechen, z.B.

            <http://ob.cs.hm.edu/lectures/compiler>

10. Mit einem Backslash können Sie folgende Zeichen escapen:

        \ ` * _ {} [] () # + - . !

Ihr Übersetzer muss **kein** Inline-HTML akzeptieren. Für mehr Beispiele und z.T. genauere Beschreibung
schauen Sie bitte auf <http://daringfireball.net/projects/markdown/syntax>.

# Anforderungen an die Haskell-Applikation

Die Haskell-Applikation muss mindestens folgende verschiedene Module enthalten:

Main
:   Das ausführbare Programm mit der `main`-Funktion.
Scanner
:   Der Code der den Scanner implementiert.
Parser
:   Der Code der den Parser implementiert.
IR
:   Die Definition der Zwischenrepräsentation (Intermediate Representation).
CodeGen
:   Die Funktionen zum Generieren von HTML aus der Zwischenrepräsentation.

# Randbedingungen

-   Für den Scanner, Parser und Code-Generator sind exemplarisch Tests (QuickCheck oder HUnit) zu implementieren.
-   In den Modulen `Scanner`, `Parser`, `IR` und `CodeGen` darf kein I/O enthalten sein.
-   Der Quellcode ist mir elektronisch zur Verfügung zu stellen (entweder als ZIP-Archiv oder als Git-Repository).
